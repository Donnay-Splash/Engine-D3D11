Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer LightBuffer : register(cb0)
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
	float padding;
	float3 position;
	float padding2;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 position3D : TEXCOORD2;
};

float4 PSMain(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
	float distance;
	float maxDist = 25.0f;
	float attenuation;
	float4 diffuseComp;
	float constantFactor = 1.0f;
	float linearFactor = 0.125f;
	float quadraticFactor = 0.0f;
	//float3 reflection;
	//float4 specular;
	//float4 finalSpec;

	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);
	
	//set the minimum possible colour to the ambient colour
	color = ambientColor;
	
	// Invert the light direction for calculations.
    lightDir = input.position3D - position;

	//calculate light distance
	distance = length(lightDir);

	//calculate reflection
	//reflection = reflect(-lightDir, input.normal);

	// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
	//specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

	//sum up specular light
	//finalSpec = specularColor * specular;

    // Calculate the amount of light on this pixel.
	if(distance <= maxDist)
	{
		lightDir = normalize(lightDir);
		lightIntensity = saturate(dot(input.normal, -lightDir));
	
		// Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
		if(lightIntensity > 0)
		{
			diffuseComp = (diffuseColor * lightIntensity);
			attenuation = (1 / (constantFactor + linearFactor * distance + quadraticFactor * distance * distance));
			color += diffuseComp * attenuation;
		}
	}
	// Saturate the final light color.
	color = saturate(color);
    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	// Add the specular component last to the output color.
	//color = saturate(color + finalSpec);

    return color;
}

